<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.cn.shenzhen</groupId>
  <artifactId>nanshan</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>spirngboot</name>

  <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>1.5.9.RELEASE</version>
  </parent>

    <!--定义jar包版本-->
    <properties>
        <mysql.version>5.1.43</mysql.version>
        <mybaits.version>1.3.0</mybaits.version>
    </properties>


  <dependencies>

      <!--spirng boot 核心starter-->
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter</artifactId>
      </dependency>

      <!--spirng boot web项目所依赖的jar包-->
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-web</artifactId>
          <!--spring boot  默认日志框架是logback,如果想用log4j作为日志框架的话，就应该排除掉logback之类的jar包，保证
          classpath当中有log4j之类的jar包，配置好log4j.properties文件放到classpath当中就可以了。
          而如果要使用logback，有两种:1.在application.yml里配置日志变量。2.配置好logback,放到classpath当中就可以了
          -->
          <!--<exclusions>-->
              <!--<exclusion>-->
                  <!--<groupId>org.springframework.boot</groupId>-->
                  <!--<artifactId>spring-boot-starter-logging</artifactId>-->
              <!--</exclusion>-->
          <!--</exclusions>-->

      </dependency>

      <!-- 引进测试所需要依赖的jar包-->
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
          <scope>test</scope>
      </dependency>

      <!--引进mysql驱动jar包-->
      <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>${mysql.version}</version>
      </dependency>

      <!--引进mybaits jar包-->
      <dependency>
          <groupId>org.mybatis.spring.boot</groupId>
          <artifactId>mybatis-spring-boot-starter</artifactId>
          <version>${mybaits.version}</version>
      </dependency>

      <!--引入jdbc 所需要的jar包-->
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-jdbc</artifactId>
          <!--spring boot 默认的数据源是org.apache.tomcat.jdbc.pool.DataSource
            如果想要引用自己的数据源，那么就要排除它已有的数据源,引进自己的数据源。
            我这里引进阿里巴巴的数据源-->
          <exclusions>
              <exclusion>
                  <groupId>org.apache.tomcat</groupId>
                  <artifactId>tomcat-jdbc</artifactId>
              </exclusion>
          </exclusions>
      </dependency>

      <!--引入Druid依赖-->
      <dependency>
          <groupId>com.alibaba</groupId>
          <artifactId>druid</artifactId>
          <version>1.0.29</version>
      </dependency>




      <!--引进lombok jar包 @Data代替setter，getter方法-->
       <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>


  </dependencies>

    <!--spring boot maven 插件-->
    <!--有时间看看maven插件是个什么原理情况-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <!--如果没有加<resources>,那么就默认包含项目中resource目录所有的资源文件，如果加了<resource>,
        那么就要指明具体要包含哪些资源文件-->
            <resources>
                <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                        <include>**/*.*</include>
                    </includes>
                </resource>
                <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                        <include>application.yml</include>
                    </includes>
                    <filtering>true</filtering>
                </resource>

                <!-- profile对资源的操作 -->
                <resource>
                    <directory>src/main/environment/${profileActive}</directory>
                    <includes>
                        <include>**/*.*</include>
                    </includes>

                    <!--通过这里设置是否排除banner.txt文件，以达到是否修改了banner-->
                    <excludes>
                        <exclude>banner.txt</exclude>
                    </excludes>

                    <!-- 是否替换@xx@表示的maven properties属性值 -->
                    <filtering>true</filtering>
                </resource>
            </resources>


    </build>




    <!--默认情况是把application-***.yml放到src/main/resources里面，然后在application.yml里面设置
    spring:
        profiles:
            active: dev/test/pro   但是这样每次都要手动，很不灵活,所以通过Maven控制Spring Profile-->

    <!-- Maven控制Spring Profile -->
    <!--参考网址;https://segmentfault.com/a/1190000011770028-->

    <!-- maven 中的profile可以看作是一种开关，<resource>中的<filtering>表示将maven中的变量${xxx}传到<resource>中对应的文件中去-->

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <profileActive>dev</profileActive>
            </properties>
            <!--<dependencies>-->
                <!--<dependency>-->
                    <!--<groupId>org.springframework.boot</groupId>-->
                    <!--<artifactId>spring-boot-starter-tomcat</artifactId>-->
                <!--</dependency>-->
                <!--<dependency>-->
                    <!--<groupId>org.apache.tomcat</groupId>-->
                    <!--<artifactId>tomcat-jdbc</artifactId>-->
                <!--</dependency>-->
            <!--</dependencies>-->
        </profile>

        <profile>
            <id>test</id>
            <properties>
                <profileActive>test</profileActive>
            </properties>
        </profile>

        <profile>
            <id>pro</id>
            <properties>
                <profileActive>pro</profileActive>
            </properties>
        </profile>
    </profiles>




</project>
